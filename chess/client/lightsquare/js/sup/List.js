// Generated by LiveScript 1.5.0
(function(){
  define(function(require){
    var Sup, List;
    Sup = require('./Sup');
    return List = (function(superclass){
      var prototype = extend$((import$(List, superclass).displayName = 'List', List), superclass).prototype, constructor = List;
      function List(_items){
        var this$ = this;
        this._items = _items != null
          ? _items
          : [];
        List.superclass.call(this, this._items);
        this.length = this._items.length;
        this.subscribe(function(){
          return this$.length = this$._items.length;
        });
      }
      List.prototype.add = function(item, nestPrefix){
        superclass.prototype.add.call(this, item);
        if (nestPrefix) {
          return item.nest(this, nestPrefix);
        }
      };
      List.prototype.toJSON = function(){
        return this._items;
      };
      return List;
    }(Sup));
  });
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
