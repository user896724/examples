// Generated by LiveScript 1.5.0
(function(){
  var toString$ = {}.toString;
  define(function(require){
    var remove, Subscription, Path, Sup;
    remove = require('Array.prototype/remove');
    Subscription = require('./Subscription');
    Path = require('./Path');
    return Sup = (function(){
      Sup.displayName = 'Sup';
      var prototype = Sup.prototype, constructor = Sup;
      function Sup(object){
        var this$ = this;
        this.object = object != null ? object : this;
        this._subscriptions = [];
        this._operations = {
          add: function(path, value){
            var object;
            object = this$.object;
            if (path) {
              object = Path.traverse(path, object).object;
            }
            object.push(value);
            return this$.publish("add", path, value);
          },
          del: function(path){
            var step;
            step = Path.traverse(path, this$.object);
            step.parent.splice(step.index, 1);
            return this$.publish("del", path);
          },
          mod: function(path, value){
            var step;
            step = Path.traverse(path, this$.object);
            step.parent[step.index] = value;
            return this$.publish("mod", path, value);
          },
          merge: function(path, value){
            var object;
            object = this$.object;
            if (path) {
              object = Path.traverse(path, this$.object).object;
            }
            import$(object, value);
            return this$.publish("merge", path, value);
          }
        };
      }
      Sup.prototype.del = function(){
        return this._operations.del.apply(this, arguments);
      };
      Sup.prototype.delItem = function(item, path){
        var object, index, results$ = [];
        path == null && (path = "");
        object = this.object;
        if (path) {
          object = Path.traverse(path, object).object;
        }
        while ((index = object.indexOf(item)) !== -1) {
          results$.push(this.del((path + " " + index).trim()));
        }
        return results$;
      };
      Sup.prototype.add = function(value, path){
        path == null && (path = "");
        return this._operations.add(path, value);
      };
      Sup.prototype.mod = function(){
        return this._operations.mod.apply(this, arguments);
      };
      Sup.prototype.merge = function(path, value){
        if (toString$.call(path).slice(8, -1) === "Object") {
          value = path;
          path = "";
        }
        return this._operations.merge(path, value);
      };
      Sup.prototype.update = function(type, path, value){
        return this._operations[type](path, value);
      };
      Sup.prototype.inc = function(path){
        return this._operations.mod(path, Path.traverse(path, this.object).object + 1);
      };
      Sup.prototype.dec = function(path){
        return this._operations.mod(path, Path.traverse(path, this.object).object - 1);
      };
      Sup.prototype.publish = function(type, path, value){
        var this$ = this;
        return this._subscriptions.forEach(function(it){
          return it.send(type, path, value);
        });
      };
      Sup.prototype.subscribe = function(handler){
        var subscription;
        subscription = new Subscription(this, handler);
        this._subscriptions.push(subscription);
        return subscription;
      };
      Sup.prototype.unsubscribe = function(it){
        return this._subscriptions.remove(it);
      };
      Sup.prototype.pipe = function(sup){
        var this$ = this;
        return this.subscribe(function(type, path, value){
          return sup.update(type, path, value);
        });
      };
      Sup.prototype.nest = function(sup, prefix){
        var this$ = this;
        return this.subscribe(function(type, path, value){
          return sup.publish(type, Path.prefix(path, prefix, sup.object, this$.object), value);
        });
      };
      Sup.prototype.addChild = function(path, sup){
        var step;
        step = Path.traverse(path, this.object);
        step.parent[step.index] = sup;
        return sup.nest(this, path);
      };
      return Sup;
    }());
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
