// Generated by LiveScript 1.5.0
(function(){
  var toString$ = {}.toString;
  define(function(require){
    /*
    creates a copy of a value with toJSON called on all applicable
    objects
    
    since it loops over all properties, circular references can only
    be followed to a certain depth.  that's what the stack and
    circularDepth arguments are for - they're only used internally.
    */
    var MAX_CIRCULAR_DEPTH;
    MAX_CIRCULAR_DEPTH = 2;
    function cloneToJson(object, stack, circularDepth){
      var type, json, key, value;
      stack == null && (stack = []);
      circularDepth == null && (circularDepth = 0);
      type = toString$.call(object).slice(8, -1);
      if (type === 'Object' || type === 'Array') {
        if (in$(object, stack)) {
          circularDepth++;
        }
        if (circularDepth < MAX_CIRCULAR_DEPTH) {
          stack.push(object);
          if (type === 'Object') {
            json = {};
            for (key in object) {
              value = object[key];
              if (value && value.toJSON) {
                value = value.toJSON();
              }
              json[key] = cloneToJson(value, stack, circularDepth);
            }
            return json;
          } else {
            return object.map(function(it){
              return cloneToJson(it, stack, circularDepth);
            });
          }
        } else {
          return "(circular)";
        }
      } else {
        return object;
      }
    }
    return cloneToJson;
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
