define(function(require) {
	require("Array.prototype/remove");
	var Publisher = require("js/Publisher");
	var id = require("js/id");
	var Event = require("js/Event");
	var time = require("js/time");
	
	var MAX_IDLE_TIME_BEFORE_INACTIVE = 1000 * 60 * 60 * 24;
	
	function User(client) {
		this._id = id();
		
		this.Connected = new Event();
		this.Disconnected = new Event();
		this.ClientConnected = new Event();
		this.CheckingActivity = new Event();
		this.Deregistering = new Event();
		
		this._clients = [client];
		this._setupClient(client);
		this._publisher = new Publisher(this);
	}
	
	User.prototype.on = function(topic, callback) {
		this.subscribe(topic, callback);
	}
	
	User.prototype.emit = function(topic, data) {
		this.send(topic, data);
	}
	
	User.prototype.isConnected = function() {
		return (this._clients.length > 0);
	}
	
	User.prototype.addClient = function(client) {
		this._clients.push(client);
		
		if(this._clients.length === 1) {
			this.Connected.fire();
		}
		
		this.ClientConnected.fire({
			client: client
		});
		
		this._setupClient(client);
	}
	
	User.prototype.deregister = function() {
		var isActive = (this.getTimeLastActive() >= time() - MAX_IDLE_TIME_BEFORE_INACTIVE);
		
		if(!isActive) {
			this.CheckingActivity.fire({
				registerActivity: function() {
					isActive = true;
				}
			});
		}
		
		if(!isActive) {
			this.Deregistering.fire();
			this.disconnect();
		}
		
		return !isActive;
	}
	
	User.prototype.disconnect = function() {
		this._clients.forEach(function(client) {
			client.disconnect();
		});
	}
	
	User.prototype._setupClient = function(client) {
		client.Disconnected.addHandler(function() {
			this._removeClient(client);
		}, this);
		
		client.subscribe("*", (function(topic, data, client) {
			this._publisher.publish(topic, data, client);
		}).bind(this));
	}
	
	User.prototype._removeClient = function(client) {
		this._clients.remove(client);
		
		if(this._clients.length === 0) {
			this.Disconnected.fire();
		}
	}
	
	User.prototype.subscribe = function(topic, callback) {
		this._publisher.subscribe(topic, callback);
	}
	
	User.prototype.unsubscribe = function(topic, callback) {
		this._publisher.unsubscribe(topic, callback);
	}
	
	User.prototype.send = function(topic, data) {
		this._clients.forEach(function(client) {
			client.send(topic, data);
		});
	}
	
	User.prototype.getTimeLastActive = function() {
		return Math.max.apply(Math, this._clients.map(function(client) {
			return client.getTimeLastActive();
		}));
	}
	
	return User;
});